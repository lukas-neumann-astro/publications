###############################
#   PyStructure Confif File   #
###############################

####################################
# Step 1: Define the correct Paths #
####################################

# <path to directory with the data files>
data_dir = "/Users/lneumann/Documents/PhD/Data/ALMOND/cubes/"

# <filename of geometry file>
geom_file = "List_Files/geometry_almond+empire.csv"
# <filename of overlay or mask> #should be stored in data_dir
overlay_file = "_7m+tp_hcn.fits"

# <Output Directory for Dictionaries>
out_dic = "/Users/lneumann/Documents/PhD/Data/ALMOND/pystruct/"

#####################################
# Step 2: Set the Target Resolution #
#####################################
# Set the target resolution for all data in arcseconds (if resolution set to angular)
target_res = 1500.


#!!!!!!!!!!!!!Advanced------------------------------------------
NAXIS_shuff = 200
CDELT_SHUFF = 5000.  #m/s
spacing_per_beam = 2 #default, use half beam spacing
# give number (in units deg) or set to "auto"
max_rad = "auto" #default extension of the map in deg (increase, if you map is larger)


#angular: use target_res in as
#physical: convert target_res (in pc) to as
#native: use the angular resolution of the overlay image
resolution = 'native'

# Save the convolved cubes & bands
save_fits = False


#Define which line to use as reference line for the spectral processing
#"first": use first line in cube_list as reference line
#"<LINE_NAME>": Use line name as reference line
#"all": Use all lines in cube for mask
#n: (integer) use first n lines as reference. n=0 is same result as "first".
#"ref+HI": Use first line and HI
ref_line = "first"

#define upper and lower mask threshold (S/N)
SN_processing = [2,4]

#define SN threshold for Mom1, Mom2 and EW calculation (for individual lines)
mom_thresh = 5
#differentiate between "fwhm", "sqrt", or "math"
# math: use mathematical definition
# sqrt: take square-root of mom2
# fwhm: convert sqrt(mom2) to fwhm
mom2_method = "fwhm"


# Spectral smoothing
#"default": Do not perform any spectral smoothing
#"overlay": Perform spectral smoothing to spectral resolution of overlay cube
#n: float â€“ convolve to spectral resolution n [km/s] !!!Not yet correctly implemented -> highly oversampled
spec_smooth = "default"


# define the way the spectral smoothing should be performed:
#"binned": binn channels together (to nearest integer of ratio theta_target/theta_nat)
#"gauss": perform convolution with gaussian kernel (theta_target^2-theta_nat^2)**0.5
#!!!! Warning, gaussian smoothing seems to systematicaly underestimate the rms by 10-15%
#"combined": do the binned smoothing first (to nearest integer ratio) and then the rest via Gauss
spec_smooth_method = "binned"


# Save the created moment maps as fits file
save_mom_maps = False

#folder to save fits files in
folder_savefits="/Users/lneumann/Documents/PhD/Data/ALMOND/maps/"

#---------------------------------------------------------------
#####################################
# Step 3: Set Sources              #
#####################################
#can be single source (e.g. cloud or galaxy), or list of strings: sources = "ngc5194", "ngc5457"
# sources = "ngc4321"
sources = 'ngc0628', 'ngc1097', 'ngc1365', 'ngc1385', 'ngc1511', 'ngc1546', 'ngc1566', 'ngc1672', 'ngc1792', 'ngc2566', 'ngc2903', 'ngc2997', 'ngc3059', 'ngc3521', 'ngc3621', 'ngc4303', 'ngc4321', 'ngc4535', 'ngc4536', 'ngc4569', 'ngc4826', 'ngc5248', 'ngc5643', 'ngc6300', 'ngc7496'  # almond sample


#####################################
# Step 4: Define Bands              #
#####################################
# Column 1: short name of band
# Column 2: description for database
# Column 3: units
# Column 4: extension
# Column 5: path to files
# Column 6: extension to uc file
sfr_z0mgs,	SFR_z0MGS,	MSun/yr/kpc^2,	_sfr_gauss15.fits,	/Users/lneumann/Documents/PhD/Data/ALMOND/sfr/z0mgs/,	_sfr_err_gauss15.fits
mstar,	MSTAR,	Msun/pc^2,	_mstar_gauss15.fits,	/Users/lneumann/Documents/PhD/Data/ALMOND/mstar/,	_mstar_err_gauss15.fits
alphaco21_sl24,	ALPHA_CO21_SL24_SCALING,	Msun/pc^2/K/km.s,	_alphaCO21_SL24_scaling.fits,	/Users/lneumann/Documents/PhD/Data/ALMOND/conversion_factors/,	_alphaCO21_SL24_scaling.fits
alphaco10_sl24,	ALPHA_CO10_SL24_SCALING,	Msun/pc^2/K/km.s,	_alphaCO10_SL24_scaling.fits,	/Users/lneumann/Documents/PhD/Data/ALMOND/conversion_factors/,	_alphaCO10_SL24_scaling.fits
r21_sl24,	R_CO21_CO10_SL24,	none,	_R21_SL24_scaling.fits,	/Users/lneumann/Documents/PhD/Data/ALMOND/conversion_factors/,	_R21_SL24_scaling.fits
hi_21cm,	HI_21cm,	K km/s,	_21cm_strictmask_mom0.fits,	/Users/lneumann/Documents/PhD/Data/ALMOND/hi/,	_21cm_strictmask_emom0.fits


#####################################
# Step 5: Define Cubes              #
#####################################
# Column 1: short name of cube
# Column 2: description for database
# Column 3: units
# Column 4: extension
# Column 5: path to files
# Column 6 optional: extension, if 2D map provided
# Column 7 optional: extension err, if 2D map provided
co21,	CO(2-1),	K,	_12m+7m+tp_co21.fits,	/Users/lneumann/Documents/PhD/Data/PHANGS/phangs_alma/cubes/
hcn10,	HCN(1-0),	K,	_7m+tp_hcn.fits,	/Users/lneumann/Documents/PhD/Data/ALMOND/cubes/
hcop10,	HCOP(1-0),	K,	_7m+tp_hcop.fits,	/Users/lneumann/Documents/PhD/Data/ALMOND/cubes/
cs21,	CS(2-1),	K,	_7m+tp_hcop.fits,	/Users/lneumann/Documents/PhD/Data/ALMOND/cubes/